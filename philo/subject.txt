
/*
Recursos:
Threads playlist: 
![CodeVault](https://www.youtube.com/watch?v=d9s_d28yJq0&list=PLfqABt5AS4FmuQf70psXrsMLEDQXNkLq2)

Phiosophers-visualizer:
![Visual Threads](https://nafuka11.github.io/philosophers-visualizer/)

Instrucciones generales:

• PARAMETROS:
◦ [number_of_philosophers]: n filósofos + n tenedores.
◦ [time_to_die]: si no empieza a comer en [time_to_die] ms
desde comienzo ultima comida o desde el principio, morirá.
◦ [time_to_eat]: tiempo para comer. Durante ese tiempo,
tendrá los tenedores ocupados.
◦ [time_to_sleep]:tiempo para dormir.
◦ [time_to_think]: tiempo de sobra
◦ [number_of_times_each_philosopher_must_eat]: si to-
dos los filósofos comen al menos number_of_times_each_philosopher_must_eat
veces, la simulación se detendrá. Si no se especifica, la simulación se detendrá
con la muerte de un filósofo.

• CASO ESPECIAL: 1 FILOSOFO
• MAX L: 200 FILOSFOS
• Cada filósofo tendrá asignado un número del 1 al number_of_philosophers.
• El filósofo número 1 se sentará al lado del filósofo número number_of_philosophers.
Cualquier otro filósofo número N se sentarán entre el filósofo número N - 1 y el filósofo número N + 1.

• Logs de tu programa:
◦ Cualquier cambio de estado de un filósofo debe tener el siguiente formato:
◦ timestamp_in_ms X has taken a l_fork
◦ timestamp_in_ms X is eating
◦ timestamp_in_ms X is sleeping
◦ timestamp_in_ms X is thinking
◦ timestamp_in_ms X died

• Importante:
◦ Reemplaza timestamp_in_ms con la marca de tiempo actual en milisegundos
y X con el numero del filósofo.
◦ El estado impreso no debe estar roto o alterado por el estado de otros filósofos
◦ No puedes tener más de 10ms entre la muerte de un filósofo y el momento en el que
imprimes su muerte.
◦ Te recuerdo, los filósofos deben evitar morir.
◦ Tu programa no debe tener ningún data races.

 */